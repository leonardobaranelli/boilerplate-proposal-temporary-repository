{
  "link": "https://developer.apple.com/documentation/ios-ipados-release-notes/ios-ipados-16_4-release-notes#Core-Telephony",
  "content": "Skip Navigation\nApple Developer\nNews\nDiscover\nDesign\nDevelop\nDistribute\nSupport\nAccount\nDocumentation\nOpen Menu\nAPI changes:\nNone\nAll Technologies\niOS & iPadOS Release Notes\n\niOS & iPadOS 18\n\niOS & iPadOS 18.1 Beta Release Notes\n\niOS & iPadOS 18\n\niOS & iPadOS 18.1 Beta Release Notes\n\niOS & iPadOS 18 Beta 4 Release Notes\n\niOS & iPadOS 17\n\niOS & iPadOS 17.6 Release Notes\n\niOS & iPadOS 17.5 Release Notes\n\niOS & iPadOS 17.4 Release Notes\n\niOS & iPadOS 17.3 Release Notes\n\niOS & iPadOS 17.2 Release Notes\n\niOS & iPadOS 17.1 Release Notes\n\niOS & iPadOS 17 Release Notes\n\niOS & iPadOS 16\n\niOS & iPadOS 16.6 Release Notes\n\niOS & iPadOS 16.5 Release Notes\n\niOS & iPadOS 16.4 Release Notes\n\niOS & iPadOS 16.3 Release Notes\n\n55 items were found. Tab back to navigate through them.\n\nNavigator is ready\niOS & iPadOS Release Notes\niOS & iPadOS 16.4 Release Notes\nArticle\niOS & iPadOS 16.4 Release Notes\nUpdate your apps to use new features, and test your apps against API changes.\nOverview\n\nThe iOS & iPadOS 16.4 SDK provides support to develop apps for iPhone and iPad running iOS & iPadOS 16.4. The SDK comes bundled with Xcode 14.3, available from the Mac App Store. For information on the compatibility requirements for Xcode 14.3, see Xcode 14.3 Release Notes.\n\nBackup and Restore\nKnown Issues\n\nWatch migration might fail when restoring a backup to a new phone. (105416351)\n\nWorkaround: Unpair the watch from the source phone, then pair it to the destination phone.\n\nBeta enrollment for iPhone and iPad\nNew Features\n\nBeginning with iOS & iPadOS 16.4 beta, members of the Apple Developer Program will see a new option to enable developer betas directly from Software Update in Settings. This new option will be automatically enabled on devices already enrolled in the program that update to the latest beta release. Your iPhone or iPad must be signed in with the same Apple ID you used to enroll in the Apple Developer Program in order to see this option in Settings. In future iOS and iPadOS releases, this new setting will be the way to enable developer betas and configuration profiles will no longer grant access. (101692915)\n\nCore ML\nDeprecations\n\nCore ML Model Deployment is being deprecated. Consider using Background Assets or NSURLSession instead. (102993813)\n\nCore Telephony\nDeprecations\n\nCTCarrier, a deprecated API, returns static values for apps that are built with the iOS 16.4 SDK or later. (76283818)\n\nDeveloper Settings\nNew Features\n\nHang Detection stays enabled after rebooting. (105618983)\n\nHome\nNew Features\n\nBoth manual and automatic Software Update support is now available for Matter Accessories. (102727759)\n\nKnown Issues\n\nThe iOS device that initiates the pairing needs to be on the same iCloud account with the home hub. Only the owner of a home, not an invited user, can pair Matter accessories. (76012945)\n\nYou might receive an error when pairing a Matter accessory using the 11 digit setup code. (101554366)\n\nWorkaround: Pair the accessory using the QR code instead.\n\nWhen a manual software update is attempted on a Matter accessory with an available update, Home might not indicate that the update has been requested and continue to indicate an update is available. (104902918)\n\nWorkaround: Check the Software Update pane in Home Settings at a later time, as the update might be taking place in the background. \n\nThe software update screen for Matter accessories might display the incorrect version number while an update is in progress. (105031569)\n\nRight after pairing, an available firmware update is not offered in the Home app. (105757029)\n\nWorkaround: Reboot all residents.\n\nWhen there are multiple of the same accessory type updating to the same firmware or if there are back-to-back firmware versions for one accessory (during an incremental update), the new firmware update might not be offered. (105787380)\n\nWorkaround: Reboot all residents or unpair the accessory and re-pair by clicking the “More options…” link to pair the accessory from there.\n\nSoftware updates for Matter accessories might be offered again, even though the update already completed successfully.\n(106073031)\n\nWorkaround: Restart your HomePod and Apple TV devices.\n\niCloud Drive\nKnown Issues\n\nFilesystem APIs such as NSFileManager might trigger materialization of dataless files and/or directory structures in iCloud Drive, leading to hangs or performance problems for the calling application. (105009536)\n\nWorkaround: Avoid calling anything which performs I/O on the main thread. Adopt UICollectionViewDataSourcePrefetching and load cells asynchronously. I/O should be wrapped under -[NSFileCoordinator coordinateAccessWithIntents:queue:byAccessor:] to avoid blocking a thread on a synchronous call. Alternatively, opt out of this behavior by setting your IO policy to IOPOL_MATERIALIZE_DATALESS_FILES_OFF but expect that I/O might fail with EDEADLK, if any component of the path is dataless (SF_DATALESS).\n\niCloud Drive might become unresponsive when opened from the Files app. (105438692)\n\nWorkaround: Restart your device.\n\nA loading indicator might appear, and the contents of iCloud Drive might be inaccessible within the Files app. (106232492)\n\nKeyboards\nNew Features\n\nUpdates to Keyboards include:\n\nSupport for new Unicode 15.0 Emoji.\n\nAutocorrect for the Korean keyboard is enabled by default for testing and feedback.\n\nUkrainian keyboard now supports predictive text.\n\nGujarati, Punjabi, and Urdu keyboards add support for transliteration layouts.\n\nNew keyboard layouts are available for Choctaw and Chickasaw. (105243233)\n\nMapKit\nResolved Issues\n\nFixed: Improved performance of MKOverlay objects. (102187262)\n\nPages, Numbers, and Keynote\nKnown Issues\n\nWhen Advanced Data Protection for iCloud is turned on, Pages, Numbers, and Keynote might unexpectedly require collaborative documents to be closed. (103463223)\n\nWorkaround: Close the affected document, spreadsheet, or presentation and reopen it after a few minutes.\n\nPasskeys and Authentication Services\nNew Features\n\nWeb browsers on iOS with the com.apple.developer.web-browser entitlement now have passkey AutoFill within their WKWebView. This capability works without requiring any code changes or needing to rebuild. (97576198)\n\nA new AuthorizationController API allows you to perform passkey and other types of authorization requests from SwiftUI views. (97576703)\n\nA new WebAuthenticationSession API allows you to perform OAuth and other types of web-based authentication flows from SwiftUI views. (101259868)\n\nResolved Issues\n\nFixed: Conditional mediation requests (passkey AutoFill) in web content don’t abort when their AbortSignal is fired. (99535627)\n\nFixed: AutoFill, including AutoFill for passkeys and passwords, now works with input elements contained in a Shadow DOM in web content. (103859657)\n\nFixed: Calling PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable() or PublicKeyCredential.isConditionalMediationAvailable() from a web page in a WKWebView now correctly returns whether passkeys can be used, based on the Associated Domains of the calling app. (104094169)\n\nPencil\nNew Features\n\nApple Pencil hover now provides Tilt and Azimuth support. (105412781)\n\nSafari Web Extensions\nNew Features\n\nAdded support for modifyHeaders action type for declarativeNetRequest rules. (71867709)\n\nAdded support for browser.storage.session to store up to 10MB of data in-memory. (79283961)\n\nAdded support for persistent content scripts via browser.scripting.registerContentScript, browser.scripting.getRegisteredContentScripts, browser.scripting.unregisterContentScripts, and scripting.updateContentScripts. (91261369)\n\nResolved Issues\n\nFixed browser.webNavigation events firing for hosts where the extension didn’t have access. Extensions should request host permissions for sites to receive events. (100204850)\n\nSKAdNetwork\nResolved Issues\n\nFixed an issue where SKAdNetwork for Web Ads didn’t accept ad impressions. (104839712)\n\nStoreKit\nNew Features\n\nNew StoreKit 2 APIs are available for promoted in-app purchases. Apps can receive promoted product purchase data from the App Store with PurchaseIntent.intents and can manage promoted order and visibility with Product.PromotionInfo. (85321849)\n\nSwiftUI\nNew Features\n\nA family of new view modifiers lets you build even richer resizable sheet experience with SwiftUI. Use these new modifiers to make the view behind a sheet interactive, provide a translucent background, control scrolling and expansion behavior, and even adjust the corner radius of the sheet.\n\nTo let people interact with the content behind a sheet, use the .presentationBackgroundInteraction(_:) modifier. The following example enables people to interact with the view behind the sheet when the sheet is at the smallest detent, but not at the other detents:\n\n   struct ContentView: View {\n       @State private var showSettings = false\n\n\n       var body: some View {\n           Button(\"View Settings\") {\n               showSettings = true\n           }\n           .sheet(isPresented: $showSettings) {\n               SettingsView()\n                   .presentationDetents(\n                       [.height(120), .medium, .large])\n                   .presentationBackgroundInteraction(\n                       .enabled(upThrough: .height(120)))\n           }\n       }\n   }\n\n\nGive your sheet a translucent background with the new presentationBackground(_:) modifier. The following example uses the thick material as the sheet background:\n\n  struct ContentView: View {\n      @State private var showSettings = false\n  \n      var body: some View {\n          Button(\"View Settings\") {\n              showSettings = true\n          }\n          .sheet(isPresented: $showSettings) {\n              SettingsView()\n                  .presentationBackground(.thickMaterial)\n           }\n       }\n   }\n\n\nAdd a custom view as the background of your sheet with the presentationBackground(alignment:content:) modifier.\n\nBy default, when a person swipes up on a scroll view in a resizable presentation, the presentation grows to the next detent. A scroll view embedded in the presentation only scrolls after the presentation reaches its largest size. Use the new presentationContentInteraction(_:) modifier to control which action takes precedence.\n\nFor example, you can request that swipe gestures scroll content first, resizing the sheet only after hitting the end of the scroll view, by passing the .scrolls value to this modifier:\n\n   struct ContentView: View {\n       @State private var showSettings = false\n\n\n       var body: some View {\n           Button(\"View Settings\") {\n               showSettings = true\n           }\n           .sheet(isPresented: $showSettings) {\n               SettingsView()\n                   .presentationDetents([.medium, .large])\n                   .presentationContentInteraction(.scrolls)\n           }\n       }\n   }\n\n\n(101565636)\n\nApply the new .presentationCompactAdaptation(_:) modifier to the content of a modal presentation to control how it adapts to compact size classes on iPad and iPhone.\n\nFor example, the popover modifier presents a popover on iPad. By default, a popover adapts to the narrow horizontal size class on iPhone by showing as a sheet. In the example below, the .presentationCompactAdaptation(.none) modifier asks SwiftUI to show this as a popover on iPhone as well.\n\n  struct PopoverExample: View {\n      @State private var isShowingPopover = false\n  \n      var body: some View {\n          Button(\"Show Popover\") {\n              self.isShowingPopover = true\n          }\n          .popover(isPresented: $isShowingPopover) {\n              Text(\"Popover Content\")\n                  .padding()\n                  .presentationCompactAdaptation(.none)\n          }\n      }\n  }\n\n\nUse .presentationCompactAdaptation(horizontal:vertical:) to adapt differently in horizontally and vertically compact size classes. (103257577)\n\nResolved Issues\n\nFixed: ScrollView has improved support for right to left languages by default. If you have a ScrollView that shouldn’t change its behavior in right to left languages, use the .environment(\\.layoutDirection, .leftToRight) modifier to ensure the ScrollView always sees a left to right layout direction. (65108729)\n\nFixed: Presentations in SwiftUI using the ‘sheet’ or ‘fullScreenCover’ modifier can now be dynamically presented again while a dismiss animation is in progress. Previously, attempting to present again in this case would do nothing.\n\nNote: A data race in app code that was previously ignored might cause a sheet to be presented again with this change. If this happens, check that your state isn’t triggering a new presentation. (101487810)\n\nFixed: Refreshable modifiers applied to lists will no longer also apply to lists or scroll views within the content of that list. Re-apply a refreshable modifier to the content of the list if this is desired behavior. (102052575)\n\nFixed: The no-argument presentationBackground() modifier has been removed. Use one of the overloads taking an explicit ShapeStyle or View instead. (105598868)\n\nDeprecations\n\nTimelineView initializers that pass an instance of TimelineView<_, _>.Context into its content closure have been deprecated in this release, and replaced with equivalent versions that pass an instance of TimelineViewDefaultContext instead.\n\nIn TimelineView code that does not generate a warning, no action is needed: code that does not explicitly annotate the context type will use the new API when recompiled, without any change in functionality.\n\nIn TimelineView code that does show this new deprecation warning, changing type annotations from TimelineView<_, _>.Context to TimelineViewDefaultContext will resolve the warning.\n\nThis change improves the performance of compiling Swift and SwiftUI code. The new initializer uncouples the generic type of the TimelineView being instantiated from the generic type of the context passed into its content closure, avoiding the need for the compiler to reconcile those types during compilation. (100641618)\n\nSeveral table initializers that were previously deprecated and replaced in iOS 16.2 and macOS 13.1 have now been removed from the API. Using these initializers will now generate a build error, with a Fix-It to switch to the replacement initializer API. For code that doesn’t generate this error, no action is needed.\n\nThis change, along with other improvements in the Swift compiler, improve the performance of compiling Swift and SwiftUI code.\n\nThe new, replacement API adds a parameter, of:, that identifies the type of the Table’s row values separately from the initializer’s row and column content closure parameters. This improves compilation performance in two ways. First, by knowing the row value type up-front, the compiler doesn’t need to infer that type from the body implementations of each closure. Second, the compiler can immediately enforce that each closure uses the same row value type in its body implementation, instead of needing to verify that the inferred types are equal after evaluating each closure.\n\nThe following examples show code for creating a Table before and after adoption of the new API:\n\n// before (will now produce an error):\nTable {\n  TableColumn(\"Name\", value: \\.name)\n  TableColumn(\"Email\", value: \\.email)\n} rows: {\n  ForEach(people) { person in\n      TableRow(person)\n  }\n}\n\n\n// after:\nTable(of: Person.self) {\n  TableColumn(\"Name\", value: \\.name)\n  TableColumn(\"Email\", value: \\.email)\n} rows: {\n  ForEach(people) { person in\n      TableRow(person)\n  }\n}\n\n\n(102910184)\n\nSwiftUI Navigation\nResolved Issues\n\nFixed: Navigation destinations nested within NavigationStack and NavigationSplitView are detected more performantly and reliably, no longer logging update cycles. (97597634)\n\nFixed: Navigation destinations that present a new view on top of a NavigationSplitViewColumn (rather than pushing a view onto a stack in that column) no longer cause an assertion failure on iOS or infinite loop on macOS when the destination view is itself a NavigationStack.\n\nFor example, the below construction is functional\n\nNavigationSplitView { \n    SidebarView()\n    .navigationDestination(isPresented: $present) {\n        NavigationStack { ... }\n    }\n} detail: { ... }\n\n\n(103278180)\n\nFixed: Navigation destinations with data dependencies captured from ancestor views update more reliably.\n\nstruct DataDependentNavigation: View {\n  @State var changeColor: Bool = false\n  @State var present: Bool = false\n\n\n  var body: some View {\n  NavigationSplitView {\n    Color.blue\n      .navigationDestination(isPresented: $present) {\n           // This is a data dependency from an ancestor view\n            changeColor ? Color.green : Color.yellow\n      }\n  } detail: {\n    Color.teal\n  }\n}\n\n\n(103429535)\n\nWallet\nKnown Issues\n\nAn error might occur when adding or presenting an ID card. (105302759)\n\nSee Also\niOS & iPadOS 16\niOS & iPadOS 16.6 Release Notes\nUpdate your apps to use new features, and test your apps against API changes.\niOS & iPadOS 16.5 Release Notes\nUpdate your apps to use new features, and test your apps against API changes.\niOS & iPadOS 16.3 Release Notes\nUpdate your apps to use new features, and test your apps against API changes.\niOS & iPadOS 16.2 Release Notes\nUpdate your apps to use new features, and test your apps against API changes.\niOS 16.1 Release Notes\nUpdate your apps to use new features, and test your apps against API changes.\niOS 16 Release Notes\nUpdate your apps to use new features, and test your apps against API changes.\niPadOS 16 Release Notes\nUpdate your apps to use new features, and test your apps against API changes.\nCurrent page is iOS & iPadOS 16.4 Release Notes\nApple\nDeveloper\nDocumentation\nPlatforms\niOS\niPadOS\nmacOS\ntvOS\nvisionOS\nwatchOS\nTools\nSwift\nSwiftUI\nSwift Playgrounds\nTestFlight\nXcode\nXcode Cloud\nSF Symbols\nTopics & Technologies\nAccessibility\nAccessories\nApp Extension\nApp Store\nAudio & Video\nAugmented Reality\nDesign\nDistribution\nEducation\nFonts\nGames\nHealth & Fitness\nIn-App Purchase\nLocalization\nMaps & Location\nMachine Learning\nOpen Source\nSecurity\nSafari & Web\nResources\nDocumentation\nTutorials\nDownloads\nForums\nVideos\nSupport\nSupport Articles\nContact Us\nBug Reporting\nSystem Status\nAccount\nApple Developer\nApp Store Connect\nCertificates, IDs, & Profiles\nFeedback Assistant\nPrograms\nApple Developer Program\nApple Developer Enterprise Program\nApp Store Small Business Program\nMFi Program\nNews Partner Program\nVideo Partner Program\nSecurity Bounty Program\nSecurity Research Device Program\nEvents\nMeet with Apple Experts\nApple Developer Centers\nApp Store Awards\nApple Design Awards\nApple Developer Academies\nEntrepreneur Camp\nWWDC\nTo submit feedback on documentation, visit Feedback Assistant.\nSelect a color scheme preference\nLight\nDark\nAuto\nCopyright © 2024 Apple Inc. All rights reserved.Terms of UsePrivacy PolicyAgreements and Guidelines"
}
